{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { getLocalStorage } from '../../helpers/localStorage';\nimport { USER } from '../../helpers/constants';\nconst userNull = {\n  rol: '',\n  id: '',\n  dataUser: {}\n};\nconst persistedUser = getLocalStorage(USER);\nconst initialState = {\n  loadingLogin: false,\n  status: 'checking',\n  token: null,\n  errorMessage: '',\n  user: persistedUser\n};\nconst authSlice = createSlice({\n  name: 'authSlice',\n  initialState,\n  reducers: {\n    signIn: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      return { ...state,\n        errorMessage: '',\n        status: 'authenticated',\n        token: payload.token,\n        user: payload.user\n      };\n    },\n    addError: (state, action) => {\n      return { ...state,\n        user: userNull,\n        status: 'not-authenticated',\n        token: null,\n        errorMessage: action.payload,\n        loadingLogin: false\n      };\n    },\n    removeError: state => {\n      return { ...state,\n        errorMessage: '',\n        loadingLogin: false\n      };\n    },\n    notAuthenticated: state => {\n      return { ...state,\n        status: 'not-authenticated',\n        token: null,\n        user: userNull,\n        loadingLogin: false\n      };\n    },\n    logout: state => {\n      return { ...state,\n        status: 'not-authenticated',\n        token: null,\n        user: userNull\n      };\n    },\n    changeLoginLoading: state => {\n      return { ...state,\n        loadingLogin: true\n      };\n    }\n  }\n});\nexport const {\n  signIn,\n  addError,\n  notAuthenticated,\n  removeError,\n  logout,\n  changeLoginLoading\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Users/harold/projects/Meant/chambeaya_frontend/src/redux/slices/authSlice.ts"],"names":["createSlice","getLocalStorage","USER","userNull","rol","id","dataUser","persistedUser","initialState","loadingLogin","status","token","errorMessage","user","authSlice","name","reducers","signIn","state","payload","addError","action","removeError","notAuthenticated","logout","changeLoginLoading","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,SAASC,IAAT,QAAqB,yBAArB;AAWA,MAAMC,QAAsB,GAAG;AAC9BC,EAAAA,GAAG,EAAE,EADyB;AAE9BC,EAAAA,EAAE,EAAE,EAF0B;AAG9BC,EAAAA,QAAQ,EAAE;AAHoB,CAA/B;AAKA,MAAMC,aAAa,GAAGN,eAAe,CAACC,IAAD,CAArC;AAEA,MAAMM,YAAuB,GAAG;AAC/BC,EAAAA,YAAY,EAAE,KADiB;AAE/BC,EAAAA,MAAM,EAAE,UAFuB;AAG/BC,EAAAA,KAAK,EAAE,IAHwB;AAI/BC,EAAAA,YAAY,EAAE,EAJiB;AAK/BC,EAAAA,IAAI,EAAEN;AALyB,CAAhC;AAQA,MAAMO,SAAS,GAAGd,WAAW,CAAC;AAC7Be,EAAAA,IAAI,EAAE,WADuB;AAE7BP,EAAAA,YAF6B;AAG7BQ,EAAAA,QAAQ,EAAE;AACTC,IAAAA,MAAM,EAAE,CAACC,KAAD,WAA4C;AAAA,UAApC;AAAEC,QAAAA;AAAF,OAAoC;AACnD,aAAO,EACN,GAAGD,KADG;AAENN,QAAAA,YAAY,EAAE,EAFR;AAGNF,QAAAA,MAAM,EAAE,eAHF;AAINC,QAAAA,KAAK,EAAEQ,OAAO,CAACR,KAJT;AAKNE,QAAAA,IAAI,EAAEM,OAAO,CAACN;AALR,OAAP;AAOA,KATQ;AAUTO,IAAAA,QAAQ,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAmB;AAC5B,aAAO,EACN,GAAGH,KADG;AAENL,QAAAA,IAAI,EAAEV,QAFA;AAGNO,QAAAA,MAAM,EAAE,mBAHF;AAINC,QAAAA,KAAK,EAAE,IAJD;AAKNC,QAAAA,YAAY,EAAES,MAAM,CAACF,OALf;AAMNV,QAAAA,YAAY,EAAE;AANR,OAAP;AAQA,KAnBQ;AAoBTa,IAAAA,WAAW,EAAGJ,KAAD,IAAW;AACvB,aAAO,EACN,GAAGA,KADG;AAENN,QAAAA,YAAY,EAAE,EAFR;AAGNH,QAAAA,YAAY,EAAE;AAHR,OAAP;AAKA,KA1BQ;AA2BTc,IAAAA,gBAAgB,EAAGL,KAAD,IAAW;AAC5B,aAAO,EACN,GAAGA,KADG;AAENR,QAAAA,MAAM,EAAE,mBAFF;AAGNC,QAAAA,KAAK,EAAE,IAHD;AAINE,QAAAA,IAAI,EAAEV,QAJA;AAKNM,QAAAA,YAAY,EAAE;AALR,OAAP;AAOA,KAnCQ;AAoCTe,IAAAA,MAAM,EAAGN,KAAD,IAAW;AAClB,aAAO,EACN,GAAGA,KADG;AAENR,QAAAA,MAAM,EAAE,mBAFF;AAGNC,QAAAA,KAAK,EAAE,IAHD;AAINE,QAAAA,IAAI,EAAEV;AAJA,OAAP;AAMA,KA3CQ;AA4CTsB,IAAAA,kBAAkB,EAAGP,KAAD,IAAW;AAC9B,aAAO,EACN,GAAGA,KADG;AAENT,QAAAA,YAAY,EAAE;AAFR,OAAP;AAIA;AAjDQ;AAHmB,CAAD,CAA7B;AAwDA,OAAO,MAAM;AAAEQ,EAAAA,MAAF;AAAUG,EAAAA,QAAV;AAAoBG,EAAAA,gBAApB;AAAsCD,EAAAA,WAAtC;AAAmDE,EAAAA,MAAnD;AAA2DC,EAAAA;AAA3D,IAAkFX,SAAS,CAACY,OAAlG;AAEP,eAAeZ,SAAS,CAACa,OAAzB","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { getLocalStorage } from '../../helpers/localStorage';\nimport { USER } from '../../helpers/constants';\nimport { UserGenerico } from '../../interfaces/User';\n\ninterface AuthState {\n\tloadingLogin: boolean;\n\tstatus: 'checking' | 'authenticated' | 'not-authenticated';\n\ttoken: string | null;\n\terrorMessage: string | null;\n\tuser: any;\n}\n\nconst userNull: UserGenerico = {\n\trol: '',\n\tid: '',\n\tdataUser: {},\n};\nconst persistedUser = getLocalStorage(USER);\n\nconst initialState: AuthState = {\n\tloadingLogin: false,\n\tstatus: 'checking',\n\ttoken: null,\n\terrorMessage: '',\n\tuser: persistedUser,\n};\n\nconst authSlice = createSlice({\n\tname: 'authSlice',\n\tinitialState,\n\treducers: {\n\t\tsignIn: (state, { payload }: PayloadAction<any>) => {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\terrorMessage: '',\n\t\t\t\tstatus: 'authenticated',\n\t\t\t\ttoken: payload.token,\n\t\t\t\tuser: payload.user,\n\t\t\t};\n\t\t},\n\t\taddError: (state, action) => {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tuser: userNull,\n\t\t\t\tstatus: 'not-authenticated',\n\t\t\t\ttoken: null,\n\t\t\t\terrorMessage: action.payload,\n\t\t\t\tloadingLogin: false,\n\t\t\t};\n\t\t},\n\t\tremoveError: (state) => {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\terrorMessage: '',\n\t\t\t\tloadingLogin: false,\n\t\t\t};\n\t\t},\n\t\tnotAuthenticated: (state) => {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstatus: 'not-authenticated',\n\t\t\t\ttoken: null,\n\t\t\t\tuser: userNull,\n\t\t\t\tloadingLogin: false,\n\t\t\t};\n\t\t},\n\t\tlogout: (state) => {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstatus: 'not-authenticated',\n\t\t\t\ttoken: null,\n\t\t\t\tuser: userNull,\n\t\t\t};\n\t\t},\n\t\tchangeLoginLoading: (state) => {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloadingLogin: true,\n\t\t\t};\n\t\t},\n\t},\n});\n\nexport const { signIn, addError, notAuthenticated, removeError, logout, changeLoginLoading } = authSlice.actions;\n\nexport default authSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}