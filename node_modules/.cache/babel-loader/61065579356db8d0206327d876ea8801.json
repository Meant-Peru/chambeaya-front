{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useDispatch } from 'react-redux';\nimport { ADMIN, COMPANY, LOGIN_SUCCESS, POSTULANT, SALES, SESSION, UPDATE_SUCCESS, USER, USER_OR_PASSWORD_NOT_EXISTING } from '../helpers/constants';\nimport { auth } from '../util/auth.service';\nimport { useNavigate } from 'react-router-dom';\nimport { signIn, logout } from '../redux/slices/authSlice';\nimport { GetUser, UpdateUser } from '../util/user.service';\nimport { clearLocalStorage, saveLocalStorage } from '../helpers/localStorage';\nexport const useAuth = () => {\n  _s();\n\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const startLogin = async user => {\n    const response = await auth(user); // console.log({ response });\n\n    switch (response.data.message) {\n      case LOGIN_SUCCESS:\n        const {\n          status,\n          user: userGenerico\n        } = await validateToken(response.data.data.token);\n\n        if (status) {\n          switch (userGenerico.rol) {\n            case POSTULANT:\n            case COMPANY:\n              navigate('/myaccount', {\n                replace: true\n              });\n              return;\n\n            case SALES:\n              navigate('/account-sales', {\n                replace: true\n              });\n              return;\n\n            case ADMIN:\n              // navigate('/dashore', { replace: true });\n              return;\n\n            default:\n              return;\n          }\n        }\n\n        return;\n\n      case USER_OR_PASSWORD_NOT_EXISTING:\n        alert('No encontrado');\n        return;\n\n      default:\n        alert('ERROR SERVIDOR');\n        return;\n    }\n  };\n\n  const validateToken = async token => {\n    try {\n      const {\n        data\n      } = await GetUser(token);\n      console.log('data validateToken', data);\n      const user = {\n        dataUser: data.dataUser,\n        rol: data.rol\n      };\n      const paylod = {\n        token: token,\n        user\n      };\n      dispatch(signIn(paylod));\n      saveLocalStorage(SESSION, token);\n      saveLocalStorage(USER, user);\n      return {\n        status: true,\n        user\n      };\n    } catch (error) {\n      console.log('[validateToken]', {\n        error\n      });\n      return {\n        status: false,\n        user: {\n          rol: ''\n        }\n      };\n    }\n  };\n\n  const startLogout = () => {\n    clearLocalStorage();\n    dispatch(logout());\n    navigate('/login', {\n      replace: true\n    });\n  };\n\n  const startUpdateUser = async data => {\n    const resp = await UpdateUser(data);\n\n    if (resp.message === UPDATE_SUCCESS) {\n      const {\n        data\n      } = resp;\n      console.log({\n        data\n      });\n      const user = {\n        dataUser: data.dataUser,\n        rol: data.dataUser.rol,\n        id: data.id\n      };\n      saveLocalStorage(USER, user);\n      alert('Se actualizó correctamente...');\n    } else {\n      alert('ERROR UPDATE');\n    }\n\n    return resp;\n  };\n\n  return {\n    startLogin,\n    validateToken,\n    startLogout,\n    startUpdateUser\n  };\n};\n\n_s(useAuth, \"ZaVe+Vo7W9FMoQ/aTgBrV7UvA04=\", false, function () {\n  return [useNavigate, useDispatch];\n});","map":{"version":3,"sources":["/Users/harold/projects/Meant/chambeaya_frontend/src/hooks/useAuth.tsx"],"names":["useDispatch","ADMIN","COMPANY","LOGIN_SUCCESS","POSTULANT","SALES","SESSION","UPDATE_SUCCESS","USER","USER_OR_PASSWORD_NOT_EXISTING","auth","useNavigate","signIn","logout","GetUser","UpdateUser","clearLocalStorage","saveLocalStorage","useAuth","navigate","dispatch","startLogin","user","response","data","message","status","userGenerico","validateToken","token","rol","replace","alert","console","log","dataUser","paylod","error","startLogout","startUpdateUser","resp","id"],"mappings":"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","sourcesContent":["import { useDispatch } from 'react-redux';\nimport { ADMIN, COMPANY, LOGIN_SUCCESS, POSTULANT, SALES, SESSION, UPDATE_SUCCESS, USER, USER_OR_PASSWORD_NOT_EXISTING } from '../helpers/constants';\nimport { auth } from '../util/auth.service';\n\nimport { useNavigate } from 'react-router-dom';\nimport { signIn, logout } from '../redux/slices/authSlice';\nimport { GetUser, UpdateUser } from '../util/user.service';\nimport { UserGenerico } from '../interfaces/User';\nimport { clearLocalStorage, saveLocalStorage } from '../helpers/localStorage';\n\nexport const useAuth = () => {\n\tconst navigate = useNavigate();\n\tconst dispatch = useDispatch();\n\n\tconst startLogin = async (user: any) => {\n\t\tconst response = await auth(user);\n\t\t// console.log({ response });\n\t\tswitch (response.data.message) {\n\t\t\tcase LOGIN_SUCCESS:\n\t\t\t\tconst { status, user: userGenerico } = await validateToken(response.data.data.token);\n\n\t\t\t\tif (status) {\n\t\t\t\t\tswitch (userGenerico.rol) {\n\t\t\t\t\t\tcase POSTULANT:\n\t\t\t\t\t\tcase COMPANY:\n\t\t\t\t\t\t\tnavigate('/myaccount', { replace: true });\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tcase SALES:\n\t\t\t\t\t\t\tnavigate('/account-sales', { replace: true });\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tcase ADMIN:\n\t\t\t\t\t\t\t// navigate('/dashore', { replace: true });\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase USER_OR_PASSWORD_NOT_EXISTING:\n\t\t\t\talert('No encontrado');\n\t\t\t\treturn;\n\t\t\tdefault:\n\t\t\t\talert('ERROR SERVIDOR');\n\t\t\t\treturn;\n\t\t}\n\t};\n\n\tconst validateToken = async (token: string) => {\n\t\ttry {\n\t\t\tconst { data } = await GetUser(token);\n\t\t\tconsole.log('data validateToken', data);\n\t\t\tconst user: UserGenerico = { dataUser: data.dataUser, rol: data.rol };\n\t\t\tconst paylod = { token: token, user };\n\t\t\tdispatch(signIn(paylod));\n\t\t\tsaveLocalStorage(SESSION, token);\n\t\t\tsaveLocalStorage(USER, user);\n\t\t\treturn { status: true, user };\n\t\t} catch (error) {\n\t\t\tconsole.log('[validateToken]', { error });\n\t\t\treturn { status: false, user: { rol: '' } };\n\t\t}\n\t};\n\n\tconst startLogout = () => {\n\t\tclearLocalStorage();\n\t\tdispatch(logout());\n\t\tnavigate('/login', { replace: true });\n\t};\n\n\tconst startUpdateUser = async (data: any) => {\n\t\tconst resp = await UpdateUser(data);\n\t\tif (resp.message === UPDATE_SUCCESS) {\n\t\t\tconst { data } = resp;\n\t\t\tconsole.log({ data });\n\t\t\tconst user: UserGenerico = { dataUser: data.dataUser, rol: data.dataUser.rol, id: data.id };\n\t\t\tsaveLocalStorage(USER, user);\n\t\t\talert('Se actualizó correctamente...');\n\t\t} else {\n\t\t\talert('ERROR UPDATE');\n\t\t}\n\t\treturn resp;\n\t};\n\n\treturn {\n\t\tstartLogin,\n\t\tvalidateToken,\n\t\tstartLogout,\n\t\tstartUpdateUser,\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}